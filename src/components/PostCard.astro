---
interface Props {
  post: {
    id: number;
    title: string;
    content: string;
    imageUrl?: string;
    location?: string;
    createdAt: Date;
    author: {
      name: string;
      profileImage?: string;
    };
    categories: {
      id: number;
      name: string;
    }[];
    _count: {
      comments: number;
      likes: number;
    };
  };
}

const { post } = Astro.props;

// Format the date
const formattedDate = new Date(post.createdAt).toLocaleDateString("en-US", {
  year: "numeric",
  month: "long",
  day: "numeric",
});

// Truncate the content for the card
const truncatedContent =
  post.content.length > 150
    ? post.content.substring(0, 150) + "..."
    : post.content;

// Default image if none provided
const imageUrl = post.imageUrl || "/placeholder-travel.jpg";
---

<article class="card overflow-hidden flex flex-col h-full">
  <div class="relative">
    <img
      src={imageUrl}
      alt={post.title}
      class="w-full h-48 object-cover"
      onerror="this.src='/placeholder-travel.jpg'; this.onerror=null;"
    />
    {
      post.location && (
        <div class="absolute bottom-0 left-0 bg-primary-600 text-white px-3 py-1 text-sm">
          {post.location}
        </div>
      )
    }
  </div>

  <div class="p-5 flex-grow flex flex-col">
    <div class="flex-grow">
      <div class="flex flex-wrap gap-2 mb-2">
        {
          post.categories.map((category) => (
            <a
              href={`/categories/${category.id}`}
              class="text-xs bg-gray-100 hover:bg-gray-200 px-2 py-1 rounded-full"
            >
              {category.name}
            </a>
          ))
        }
      </div>

      <h2 class="text-xl font-bold mb-2 hover:text-primary-600">
        <a href={`/posts/${post.id}`}>{post.title}</a>
      </h2>

      <p class="text-gray-600 mb-4">{truncatedContent}</p>
    </div>

    <div class="mt-4 flex justify-between items-center text-sm text-gray-500">
      <div class="flex items-center">
        {
          post.author.profileImage ? (
            <img
              src={post.author.profileImage}
              alt={post.author.name}
              class="w-8 h-8 rounded-full mr-2"
            />
          ) : (
            <div class="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center mr-2">
              {post.author.name.charAt(0).toUpperCase()}
            </div>
          )
        }
        <span>{post.author.name}</span>
      </div>

      <div class="flex items-center space-x-4">
        <time datetime={post.createdAt.toISOString()}>{formattedDate}</time>

        <div class="flex items-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 mr-1"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
            ></path>
          </svg>
          <span>{post._count.comments}</span>
        </div>

        <div class="flex items-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 mr-1"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
            ></path>
          </svg>
          <span>{post._count.likes}</span>
        </div>
      </div>
    </div>
  </div>
</article>
